#!/bin/bash

# MCP Development Setup Script
# This script sets up the development environment for MCP

set -e

echo "🚀 Setting up MCP Development Environment"
echo "========================================="

# Check if Python 3.11+ is installed
echo "📋 Checking Python version..."
python_version=$(python3 --version 2>&1 | cut -d' ' -f2)
required_version="3.11.0"

if [ "$(printf '%s\n' "$required_version" "$python_version" | sort -V | head -n1)" = "$required_version" ]; then
    echo "✅ Python $python_version is compatible"
else
    echo "❌ Python $python_version is not compatible. Please install Python 3.11 or higher."
    exit 1
fi

# Check if Docker is installed and running
echo "📋 Checking Docker..."
if ! command -v docker &> /dev/null; then
    echo "❌ Docker is not installed. Please install Docker first."
    exit 1
fi

if ! docker info &> /dev/null; then
    echo "❌ Docker is not running. Please start Docker first."
    exit 1
fi

echo "✅ Docker is available"

# Check if Docker Compose is available
echo "📋 Checking Docker Compose..."
if ! docker compose version &> /dev/null; then
    echo "❌ Docker Compose is not available. Please install Docker Compose."
    exit 1
fi

echo "✅ Docker Compose is available"

# Create virtual environment if it doesn't exist
echo "🐍 Setting up Python virtual environment..."
if [ ! -d "venv" ]; then
    python3 -m venv venv
    echo "✅ Virtual environment created"
else
    echo "✅ Virtual environment already exists"
fi

# Activate virtual environment
echo "🔧 Activating virtual environment..."
source venv/bin/activate

# Upgrade pip
echo "📦 Upgrading pip..."
pip install --upgrade pip

# Install requirements
echo "📦 Installing Python dependencies..."
pip install -r requirements.txt

# Create .env file if it doesn't exist
echo "⚙️  Setting up environment configuration..."
if [ ! -f ".env" ]; then
    cat > .env << EOF
# MCP Environment Configuration
# Generated by setup script

# Application Settings
MCP_ENVIRONMENT=development
MCP_DEBUG=true
MCP_SECRET_KEY=dev-secret-key-change-in-production

# API Settings
MCP_API_HOST=0.0.0.0
MCP_API_PORT=8000
MCP_API_PREFIX=/api/v1

# Database Settings
MCP_DATABASE_URL=postgresql://mcp_user:mcp_password@localhost:5432/mcp
MCP_DATABASE_ECHO=true

# Redis Settings
MCP_REDIS_URL=redis://:mcp_redis_password@localhost:6379/0

# Logging Settings
MCP_LOG_LEVEL=DEBUG
MCP_LOG_FORMAT=text

# Optional: Add your OpenAI API key for AI features
# MCP_OPENAI_API_KEY=your-openai-api-key-here
EOF
    echo "✅ Created .env file with default development settings"
else
    echo "✅ .env file already exists"
fi

# Create necessary directories
echo "📁 Creating necessary directories..."
mkdir -p logs
mkdir -p data
mkdir -p monitoring/grafana/dashboards
mkdir -p monitoring/grafana/datasources
mkdir -p monitoring/prometheus
echo "✅ Directories created"

# Create basic Prometheus configuration
echo "📊 Setting up monitoring configuration..."
if [ ! -f "monitoring/prometheus/prometheus.yml" ]; then
    cat > monitoring/prometheus/prometheus.yml << EOF
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'mcp'
    static_configs:
      - targets: ['mcp:8000']
    scrape_interval: 5s
    metrics_path: /metrics
EOF
    echo "✅ Created Prometheus configuration"
fi

# Create basic database init script
echo "🗄️  Setting up database initialization..."
if [ ! -f "scripts/init_db.sql" ]; then
    cat > scripts/init_db.sql << EOF
-- MCP Database Initialization Script
-- This script runs when the PostgreSQL container starts

-- Create additional databases for testing if needed
-- CREATE DATABASE mcp_test;

-- Create extensions if needed
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Grant permissions
GRANT ALL PRIVILEGES ON DATABASE mcp TO mcp_user;
EOF
    echo "✅ Created database initialization script"
fi

# Start infrastructure services
echo "🐳 Starting infrastructure services..."
docker compose up -d postgres redis

# Wait for services to be ready
echo "⏳ Waiting for services to be ready..."
sleep 10

# Check if services are healthy
echo "🏥 Checking service health..."
if docker compose ps postgres | grep -q "healthy"; then
    echo "✅ PostgreSQL is healthy"
else
    echo "⚠️  PostgreSQL might not be ready yet"
fi

if docker compose ps redis | grep -q "healthy"; then
    echo "✅ Redis is healthy"
else
    echo "⚠️  Redis might not be ready yet"
fi

# Run tests to verify setup
echo "🧪 Running tests to verify setup..."
if python -m pytest tests/ -v --tb=short; then
    echo "✅ All tests passed"
else
    echo "⚠️  Some tests failed - check the output above"
fi

# Show next steps
echo ""
echo "🎉 Development environment setup complete!"
echo ""
echo "📋 Next steps:"
echo "1. Activate the virtual environment: source venv/bin/activate"
echo "2. Start the development server: python main.py"
echo "3. Or use Docker Compose: docker compose --profile dev up"
echo ""
echo "🌐 Services will be available at:"
echo "   • MCP API: http://localhost:8000"
echo "   • API Docs: http://localhost:8000/docs"
echo "   • PostgreSQL: localhost:5432"
echo "   • Redis: localhost:6379"
echo ""
echo "🔧 To start with full monitoring stack:"
echo "   docker compose --profile monitoring up"
echo "   • Grafana: http://localhost:3000 (admin/admin)"
echo "   • Prometheus: http://localhost:9090"
echo ""
echo "📚 Documentation and examples: see implementation.md"
echo ""
echo "Happy coding! 🚀" 