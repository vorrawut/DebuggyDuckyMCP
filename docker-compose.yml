version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mcp_postgres
    environment:
      POSTGRES_DB: mcp
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    networks:
      - mcp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp_redis
    command: redis-server --appendonly yes --requirepass mcp_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "mcp_redis_password", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MCP Application (for development)
  mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mcp_app
    environment:
      # Application Settings
      MCP_ENVIRONMENT: development
      MCP_DEBUG: "true"
      MCP_SECRET_KEY: "dev-secret-key-change-in-production"
      
      # Database Settings
      MCP_DATABASE_URL: "postgresql://mcp_user:mcp_password@postgres:5432/mcp"
      MCP_DATABASE_ECHO: "true"
      
      # Redis Settings  
      MCP_REDIS_URL: "redis://:mcp_redis_password@redis:6379/0"
      
      # API Settings
      MCP_API_HOST: "0.0.0.0"
      MCP_API_PORT: "8000"
      
      # Logging Settings
      MCP_LOG_LEVEL: "DEBUG"
      MCP_LOG_FORMAT: "text"
      
      # OpenAI Settings (optional for development)
      # MCP_OPENAI_API_KEY: "your-openai-api-key"
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker execution
    networks:
      - mcp_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    profiles:
      - dev

  # ChromaDB Vector Database (for semantic memory)
  chromadb:
    image: chromadb/chroma:latest
    container_name: mcp_chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8001
    ports:
      - "8001:8001"
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - mcp_network
    profiles:
      - full

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp_network
    profiles:
      - monitoring

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - mcp_network
    profiles:
      - monitoring

networks:
  mcp_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chromadb_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local 